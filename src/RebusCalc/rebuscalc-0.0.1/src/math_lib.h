//======== Copyright (c) 2019, Rebus Calc, Inc. , All rights reserved. ============//
//
// Purpose:     Mathematical library for calculator
//
// $Authors:    Branislav Dubec <xdubec01>
//              Andrej Ježík <xjezik03>
//				      Tibor Kubík <xkubik34>
//				      Boris Štrbák <xstrba05>
// $Date:       $2019-02-27
//============================================================================//
/**
 * @file math_lib.h
 * @author Branislav Dubec
 * @author Andrej Ježík
 * @author Tibor Kubík
 * @author Boris Štrbák
 *
 * @brief ???????????????
 */
#include <string>
#ifndef MATH_LIB_H_
#define MATH_LIB_H_
using namespace std;
double GetNum2(string getNum, int IndexofOperator, int* indexofNum2);
double GetNum1(string getNum, int IndexofOperator, int* numofOperands,
               int* indexofNum1, int start);
void SolveOperands(string & Result, int start);
void SolveMultPrecedence(string & Result, int start,  int *numOfOperands);
void SolvePowFact(string & Result, int start, int *numOfOperands);
void GetNumOfOperands(const char* expression,int* minAtStart,int* numOfLBracket, int* numOfSin, int* numOfCos, int* numOfSqrt,
                      int* numOfFact, int* numOfMult, int* numOfOperands );
void GetValueFromSinCosSqrt(const char* value, int start);
char* BracketEvalvuation(char* expression, int start, int end);
double mod(double divident, double divisor);
int CharisOperand(const char *expression, int position);
int CharAfterlBracket(const char *expression, int position);
/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     ????????????????????
*/



int CharAfterOperand(const char *expression, int position);
/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     ????????????????????
*/



int BracketValidation(const char *expression);


/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     !!!upravit - funkcia vracia -1 pri 0 operandoch, inak počet operandov
*/


int isValidInput(const char *expression);

/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     ????????????????????
*/
double result(const char *expression);


/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     ????????????????????
*/
double addition(double addend1, double addend2);


/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     ????????????????????
*/
double difference(double minuent, double subtrahent);


/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     ????????????????????
*/
double multiplication(double multiply1, double multiply2);


/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     ????????????????????
*/
double division(double divident, double divisor);


/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     ????????????????????
*/
double factorial(double factor);


/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     ????????????????????
*/
double powering(double base, double exponent);


/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     ????????????????????
*/
double m_sqrt(double base);


/**
   * @brief      ????
   *
   * @param      ???    ?????????????
   * @param      ???    ?????????????
   *
   * @return     ????????????????????
*/
double sine(double base);
double cosine(double base);
#endif
